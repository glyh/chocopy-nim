# This is merely EBNF sytax, but you can have optional, kleen closure and
# positive closure. You can use 'nil' to refer to epsilon instead. The
# ebnf_parse module won't do left-factor algorithm and recursive elimination
# algorithm for you, so please avoid them.

# Notice: nonterminal named "success" or started with "tmp" are preserved for
# guranteeing the automata works.

# Keywords to treated as primitive:
# NEWLINE, INDENT, DEDENT, INTEGER, ID, STRING

program -> ( var_def | func_def | class_def )* stmt*
class_def -> class ID "(" ID ")" : NEWLINE INDENT class_body DEDENT
class_body -> pass NEWLINE | ( var_def | class_def )+
func_def -> def ID "(" typed_var ( , typed_var )* ")" ( "->" type )? : NEWLINE
  INDENT func_body DEDENT
func_body -> ( global_decl | nonlocal_decl | var_def | func_def )* stmt+
typed_var -> ID ":" type
type -> ID | "[" type "]"
global_decl -> global ID NEWLINE
nonlocal_decl -> nonlocal ID NEWLINE
var_def -> typed_var = literal NEWLINE
stmt -> simple_stmt NEWLINE
  | if expr ":" block ( elif expr ":" block )* ( else ":" block )?
  | while expr ":" block
  | for ID in expr ":" block
simple_stmt -> pass
  | expr
  | return expr?
  | ( ID = )+ expr
block -> NEWLINE INDENT ( stmt )+ DEDENT
literal -> None | True | False | INTEGER | ID | STRING
target -> ID

expr -> expr_tier1

expr_tier1 -> expr_tier2 | expr_tier2 if expr_tier1 else expr_tier1
expr_tier2 -> expr_tier3 | expr_tier2 or expr_tier3
expr_tier3 -> expr_tier4 | expr_tier3 and expr_tier4
expr_tier4 -> expr_tier5 | not expr_tier4
expr_tier5 -> expr_tire6 | expr_tier5 relation_operator expr_tier6
expr_tier6 -> expr_tire7 | expr_tier7 additive_operator expr_tier6
expr_tier7 -> expr_tier8 | expr_tier8 multiplicative_operator expr_tier7
expr_tier8 -> expr_tier9 | '-' expr_tier8
expr_tier9 -> expr_tier10 | expr_tier9 '.' ID | expr_tier9 '[' ID ']'
expr_tier10 -> '(' expr_tier1 ')' | literal

relation_operator -> "==" | "!=" | "<" | ">" | "<=" | ">=" | is
additive_operator -> "+" | "-"
multiplicative_operator -> "*" | "//" | "%"
